using *;
local {IRCClient} = require("lib.irc");


local color(text)->
	return ("\00300%s\015"):format(text);

local patterns = {
	JOIN = "\00308[\0030%s\00308]\015 \00309>\015 %s", -- channel, nick
	NICK = "%s \00309>>\015 %s", -- nick, nick
	MODE = "\00308[\0030%s\00308]\015 Mode %s by %s", -- mode, nick
	KICK = "\00308[\0030%s\00308]\015 %s kicked %s", -- nick, nick
	KICK_2 = "\00308[\0030%s\00308]\015 %s kicked %s \00314(\015%s\00314)", -- nick, nick, reason
	PART = "\00308[\0030%s\00308]\015 \00304<\015 %s", -- nick
	PART_2 = "\00308[\0030%s\00308]\015 \00304<\015 %s \00314(\015%s\00314)", -- nick, reason
	QUIT = "\00311<\015%s\00311>\015 \00304<\015 \00314(\015%s\00314)", -- nick, reason
	ACTION = "\00308[\0030%s\00308]\015 * %s %s", -- nick, message
	ACTION_2 = "* %s %s", -- nick, message
	PRIVMSG = "\00311<\00308[\0030%s\00308]\015%s\00311>\015 %s", -- channel, nick, message
	PRIVMSG_2 = "\00311<\015%s\00311>\015 %s", -- nick, message
	NOTICE = "\00311-\00308[\0030%s\00308]\015%s\00311-\015 %s", -- channel, nick, message
	NOTICE_2 = "\00311-\015%s\00311-\015 %s", -- nick, message
	INVITE = "\00308[\0030%s\00308]\015 %s invited %s", -- nick, nick
	--NETJOIN = "\00308[\0030%s\00308]\015 \00309>\015 \00314(\00315%s\00314)\015",
	--NETSPLIT = "\00304<\015 \00314(\00315%s\00314)\015",
	_CHANNEL = "^#",
	_ACTION = "^\001ACTION.+\001$",
	_CTCP = "^\001.+\001$"
};

local prefix_pattern = re.compile([[ {|
		{:nick: {[^!]+} :} '!'
		{:user: {[^@]+} :} '@'
		{:host: {.+} :} /
		{:server: {.+} :}
|}]]);

IRCClient:add_handler('372', \line=>
	@log("\00305%s", line[(#line)]); -- MOTD
);

IRCClient:add_handler('JOIN', \line=> {
	local {nick} = prefix_pattern:match(line.prefix);
	@log(patterns.JOIN, line[1], color(nick));
});

IRCClient:add_handler('NICK', \line=> {
	local old = color((prefix_pattern:match(line.prefix)).nick);
	local new = color(line[1]);
	@log(patterns.NICK, old, new);
});

IRCClient:add_handler('MODE', \line=> {
	local channel = table.remove(line, 1);
	local {nick} = prefix_pattern:match(line.prefix);
	if (patterns._CHANNEL:match(channel))
		@log(patterns.MODE, channel, table.concat(line, " "), color(nick));
});

IRCClient:add_handler('KICK', \line=> {
	local [channel, kicked, message] = line;
	local {nick} = prefix_pattern:match(line.prefix);
	if (!= message kicked)
		@log(patterns.KICK_2, channel, color(nick), color(kicked), message);
	else
		@log(patterns.KICK, channel, color(nick), color(kicked));
});

IRCClient:add_handler('PART', \line=> {
	local [channel, message] = line;
	local {nick} = prefix_pattern:match(line.prefix);
	if (!= message nick)
		@log(patterns.PART_2, channel, color(nick), message);
	else
		@log(patterns.PART, channel, nick);
});

IRCClient:add_handler('QUIT', \line=> {
	local [message] = (|| line "Client quit");
	local {nick} = prefix_pattern:match(line.prefix);
	@log(patterns.QUIT:format(color(nick), message));
});

local a_p = "%S+%s+(.+).";

IRCClient:add_handler('PRIVMSG', \line=> {
	local {nick} = prefix_pattern:match(line.prefix);
	nick = (|| nick server);
	local [channel, message] = line;
	if channel:match(patterns._CHANNEL) {
		local prefix = color((|| (&& @users[nick].channels[channel]
			@users[nick].channels[channel].status) ""));
		local user = (.. prefix color(nick));
		if message:match(patterns._ACTION)
			@log(patterns.ACTION, channel, user, message:match(a_p));
		elseif (! message:match(patterns._CTCP))
			@log(patterns.PRIVMSG, channel, user, message);
	} else
		if message:match(patterns._ACTION)
			@log(patterns.ACTION_2, color(nick), message:match(a_p));
		elseif (! message:match(patterns._CTCP))
			@log(patterns.PRIVMSG_2, color(nick), message);
});

IRCClient:add_handler('NOTICE', \line=> {
	local {nick, server} = prefix_pattern:match(line.prefix);
	nick = (|| nick server);
	local [channel, message] = line;
	if channel:match(patterns._CHANNEL) {
		local prefix = color((|| (&& @users[nick].channels[channel]
			@users[nick].channels[channel].status) ""));
		local user = (.. prefix color(nick));
		if (! message:match(patterns._CTCP))
			@log(patterns.NOTICE, channel, user, message);
	} else
		if (! message:match(patterns._CTCP))
			@log(patterns.NOTICE_2, color(nick), message);
});
