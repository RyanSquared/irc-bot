using *;
local socket = require("cqueues.socket");
local {Error} = require("stdlib.error");

local gen_index = (\x -> setmetatable({}, {__index = x}));
local clean_table = \table-> {
	for (k, v in pairs(table))
		table[k] = nil;
};

local class ConfigurationError implements BaseError {
	__init(value, reason)=>
		@value, @reason = value, reason;
	__tostring()=>
		return ("%s(%q, reason=%q)"):format(@__class, @value, @reason);
}

local class IRCClient {
	handlers = {};
	senders = {};
	hooks = {};
	commands = {};
	possible_caps = {};

	default_config = {
		prefix = "!"
	};

	__init(server, port=6697, config=@default_config)=> {
		assert(server, "No server given");
		@config = {
			host = server,
			port = port,
			ssl = (== port 6697)
		};
		for (k, v in pairs(config))
			@config[k] = v;
		@data = {};
	}

	add_cap(name)=> {
		for (_, cap in @possible_caps)
			if (== cap name)
				return;
		table.insert(@possible_caps, name);
	}

	add_command(name, command)=>
		@commands[name] = command;

	add_hook(id, hook)=>
		if (! @hooks[id])
			@hooks[id] = {hook};
		else
			table.insert(@hooks[id], hook);

	add_handler(id, handler)=>
		if (! @handlers[id])
			@handlers[id] = {handler};
		else
			table.insert(@handlers[id], handler);

	add_sender(id, sender)=> {
		assert((! @senders[id]), (.. "Sender already exists: " id));
		@senders[id] = sender;
	}

	load_modules(modules)=> {
		if modules.commands
			for (id, command in pairs(modules.commands))
				@add_command(id, command);
		if modules.hooks
			for (id, hook in pairs(modules.hooks))
				@add_hook(id, hook);
		if modules.handlers
			for (id, handler in pairs(modules.handlers))
				@add_handler(id, handler);
		if modules.senders
			for (id, sender in pairs(modules.senders))
				@add_sender(id, sender);
	}
	
	clear_modules()=> {
		for (_, t in pairs({@commands, @handlers, @hooks, @senders,
				@possible_caps}))
			clean_table(t);
	}

	connect()=> {
		if @socket
			@socket:shutdown();
		
		local {host, port, ssl} = @config;
		if (! @config.nick)
			@config.nick = "Bot";
		if (! @config.username)
			@config.username = "FuseBot";
		if (! @config.realname)
			@config.realname =
				"FusionScript IRC Bot: https://github.com/RyanSquared/bot";

		@socket = assert(socket.connect(host, port));
		@data.last_connect = os.time();
		if ssl {
			@socket:starttls();
			@socket:flush();
		}
		@fire_hook('CONNECT');
		local {nick, username, realname, password} = @config;
		@send_raw('NICK %s', nick);
		if (&& password ssl)
			@send_raw('PASS :%s', password);
		elseif password
			error(ConfigurationError("ssl", "Must use TLS with passwords"));
		@send_raw('USER %s * * :%s', username, realname);
	}

	disconnect()=> {
		@send_raw('QUIT');
		if @socket
			@socket:shutdown();
		@fire_hook('DISCONNECT');
	}

	send_raw(pattern, ...)=> {
		local input = pattern:format(...);
		if @debug
			print((.. "=> " input));
		@socket:write((.. input "\n"));
	}

	date_pattern = "(%d+)-(%d+)-(%d+)T(%d+):(%d+):(%d+).(%d+)Z";
	parse_time(date)=> {
		year, month, day, hour, min, sec = date:match(@date_pattern);
		return {
			year = year, month = month, day = day,
			hour = hour, min = min, sec = sec
		};
	}

	line_parser = re.compile([[
		line <- {| (tags sp)? (prefix sp)? {command / numeric} (sp arg)* |}

		tags <- {:tags: '@' tag (';' tag)* :}
		tag <- {| {:vendor: {[^/]+} '/' :}? {:key: ('=' [^; ]+)? ->
			esc_tag :} |}

		prefix <- {:prefix: ':' {[^ ]+} :}

		command <- [A-Za-z]+
		numeric <- %d^+3^-4 -- at most four digits, at least three

		arg <- ':' {.+} / {%S+}

		sp <- %s
	]], {esc_tag = \tag -> tag:sub('\\(.)', setmetatable({
		[':'] = ';',
		['s'] = ' ',
		['r'] = '\r',
		['n'] = '\n'
	}, {__index = \t, k -> k}))}); -- __index required by spec

	fire_hook(name)=> {
		if (! @hooks[name])
			return;
		local errors = {};
		if @hooks[name]
			for (_, hook in pairs(@hooks[name])) {
				local ok, err = pcall(hook, @);
				if (! ok)
					table.insert(errors, err);
			}
		for (k, v in pairs(errors))
			print(v);
	}
	
	process(line)=> {
		local data = @line_parser:match(line);
		local errors = {};
		local command = table.remove(data, 1);
		if @handlers[command]
			for (_, handler in pairs(@handlers[command])) {
				local ok, err = pcall(handler, self, data);
				if (! ok)
					table.insert(errors, err);
			}
		for (k, v in pairs(errors))
			print(v);
	}

	loop()=> {
		for (received_line in @socket:lines()) {
			if @debug
				print((.. "<= " received_line));
			pcall(@process, @, received_line);
		}
	}

	colors = {
		[0] =  15, -- white
		[1] =  0,  -- black
		[2] =  4,  -- blue
		[3] =  2,  -- green
		[4] =  1,  -- red
		[5] =  3,  -- brown
		[6] =  5,  -- purple
		[7] =  3,  -- orange
		[8] =  11, -- yellow
		[9] =  10, -- light green
		[10] = 6,  -- teal
		[11] = 14, -- cyan
		[12] = 12, -- light blue
		[13] = 13, -- pink
		[14] = 8,  -- gray
		[15] = 7  -- light gray
	};

	color_to_xterm(line)=> {
		line = line:gsub("\003(%d%d?),(%d%d?)", \fg, bg-> {
			local fg, bg = tonumber(fg), tonumber(bg);
			if (&& @colors[fg] @colors[bg])
				return table.concat({"\27[38;5;", @colors[fg], ";48;5;",
					@colors[bg], "m"});
		});
		line = line:gsub("\003(%d%d?)", \fg-> {
			local fg = tonumber(fg);
			if @colors[fg]
				return table.concat({"\27[38;5;", @colors[fg], "m"});
		});
		return (line:gsub("[\003\015]", "\27[0m"));
	}

	time_format = "\00311[\015%X\00311]\015";

	log(fmt, ...)=> {
		local t = (os.date(@time_format)):gsub(":", "\00308:\015");
		print(@color_to_xterm(("%s %s\015"):format(t, fmt:format(...))));
	}
}

return {ConfigurationError = ConfigurationError, IRCClient = IRCClient};
